"""Base Schema

Revision ID: 9df691c76c63
Revises:
Create Date: 2019-02-17 21:46:53.755263

"""
from alembic import op
import sqlalchemy as sa
import simpleml

# revision identifiers, used by Alembic.
revision = '9df691c76c63'
down_revision = '0680f18b52ca'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'datasets',
        sa.Column('created_timestamp', sa.DateTime(timezone=True), server_default=sa.func.now(), nullable=False),
        sa.Column('modified_timestamp', sa.DateTime(timezone=True), nullable=True),
        sa.Column('id', simpleml.persistables.sqlalchemy_types.GUID(), nullable=False),
        sa.Column('hash', sa.BIGINT(), nullable=False),
        sa.Column('registered_name', sa.String(), nullable=False),
        sa.Column('author', sa.String(), nullable=False),
        sa.Column('project', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('version', sa.Integer(), nullable=False),
        sa.Column('version_description', sa.String(), nullable=True),
        sa.Column('has_external_files', sa.Boolean(), nullable=True),
        sa.Column('filepaths', simpleml.persistables.sqlalchemy_types.MutableJSON, nullable=True),
        sa.Column('metadata', simpleml.persistables.sqlalchemy_types.MutableJSON, nullable=True),
        sa.Column('pipeline_id', simpleml.persistables.sqlalchemy_types.GUID(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name', 'version', name='dataset_name_version_unique')
    )
    op.create_index('dataset_name_index', 'datasets', ['name'], unique=False)
    op.create_table(
        'metrics',
        sa.Column('created_timestamp', sa.DateTime(timezone=True), server_default=sa.func.now(), nullable=False),
        sa.Column('modified_timestamp', sa.DateTime(timezone=True), nullable=True),
        sa.Column('id', simpleml.persistables.sqlalchemy_types.GUID(), nullable=False),
        sa.Column('hash', sa.BIGINT(), nullable=False),
        sa.Column('registered_name', sa.String(), nullable=False),
        sa.Column('author', sa.String(), nullable=False),
        sa.Column('project', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('version', sa.Integer(), nullable=False),
        sa.Column('version_description', sa.String(), nullable=True),
        sa.Column('has_external_files', sa.Boolean(), nullable=True),
        sa.Column('filepaths', simpleml.persistables.sqlalchemy_types.MutableJSON, nullable=True),
        sa.Column('metadata', simpleml.persistables.sqlalchemy_types.MutableJSON, nullable=True),
        sa.Column('values', simpleml.persistables.sqlalchemy_types.MutableJSON, nullable=False),
        sa.Column('model_id', simpleml.persistables.sqlalchemy_types.GUID(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name', 'model_id', 'version', name='metric_name_model_version_unique')
    )
    op.create_index('metric_name_index', 'metrics', ['name'], unique=False)
    op.create_table(
        'models',
        sa.Column('created_timestamp', sa.DateTime(timezone=True), server_default=sa.func.now(), nullable=False),
        sa.Column('modified_timestamp', sa.DateTime(timezone=True), nullable=True),
        sa.Column('id', simpleml.persistables.sqlalchemy_types.GUID(), nullable=False),
        sa.Column('hash', sa.BIGINT(), nullable=False),
        sa.Column('registered_name', sa.String(), nullable=False),
        sa.Column('author', sa.String(), nullable=False),
        sa.Column('project', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('version', sa.Integer(), nullable=False),
        sa.Column('version_description', sa.String(), nullable=True),
        sa.Column('has_external_files', sa.Boolean(), nullable=True),
        sa.Column('filepaths', simpleml.persistables.sqlalchemy_types.MutableJSON, nullable=True),
        sa.Column('metadata', simpleml.persistables.sqlalchemy_types.MutableJSON, nullable=True),
        sa.Column('params', simpleml.persistables.sqlalchemy_types.MutableJSON, nullable=True),
        sa.Column('feature_metadata', simpleml.persistables.sqlalchemy_types.MutableJSON, nullable=True),
        sa.Column('pipeline_id', simpleml.persistables.sqlalchemy_types.GUID(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name', 'version', name='model_name_version_unique')
    )
    op.create_index('model_name_index', 'models', ['name'], unique=False)
    op.create_table(
        'pipelines',
        sa.Column('created_timestamp', sa.DateTime(timezone=True), server_default=sa.func.now(), nullable=False),
        sa.Column('modified_timestamp', sa.DateTime(timezone=True), nullable=True),
        sa.Column('id', simpleml.persistables.sqlalchemy_types.GUID(), nullable=False),
        sa.Column('hash', sa.BIGINT(), nullable=False),
        sa.Column('registered_name', sa.String(), nullable=False),
        sa.Column('author', sa.String(), nullable=False),
        sa.Column('project', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('version', sa.Integer(), nullable=False),
        sa.Column('version_description', sa.String(), nullable=True),
        sa.Column('has_external_files', sa.Boolean(), nullable=True),
        sa.Column('filepaths', simpleml.persistables.sqlalchemy_types.MutableJSON, nullable=True),
        sa.Column('metadata', simpleml.persistables.sqlalchemy_types.MutableJSON, nullable=True),
        sa.Column('params', simpleml.persistables.sqlalchemy_types.MutableJSON, nullable=True),
        sa.Column('dataset_id', simpleml.persistables.sqlalchemy_types.GUID(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name', 'version', name='pipeline_name_version_unique')
    )
    op.create_index('pipeline_name_index', 'pipelines', ['name'], unique=False)

    # Use "batch" operations to support sqlite restrictions
    with op.batch_alter_table('datasets') as batch_op:
        batch_op.create_foreign_key('datasets_pipeline_id_fkey', 'pipelines',
                                    ['pipeline_id'], ['id'], ondelete='CASCADE')
    with op.batch_alter_table('pipelines') as batch_op:
        batch_op.create_foreign_key('pipelines_dataset_id_fkey', 'datasets',
                                    ['dataset_id'], ['id'], ondelete='CASCADE')
    with op.batch_alter_table('models') as batch_op:
        batch_op.create_foreign_key('models_pipeline_id_fkey', 'pipelines',
                                    ['pipeline_id'], ['id'], ondelete='CASCADE')
    with op.batch_alter_table('metrics') as batch_op:
        batch_op.create_foreign_key('metrics_model_id_fkey', 'models',
                                    ['model_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade():
    # Use "batch" operations to support sqlite restrictions
    with op.batch_alter_table('metrics') as batch_op:
        batch_op.drop_constraint("metrics_model_id_fkey", type_="foreignkey")
        batch_op.drop_index('metric_name_index')
        batch_op.drop_table()
    with op.batch_alter_table('models') as batch_op:
        batch_op.drop_constraint("models_pipeline_id_fkey", type_="foreignkey")
        batch_op.drop_index('model_name_index')
        batch_op.drop_table()
    with op.batch_alter_table('pipelines') as batch_op:
        batch_op.drop_constraint("pipelines_dataset_id_fkey", type_="foreignkey")
        batch_op.drop_index('pipeline_name_index')
        batch_op.drop_table()
    with op.batch_alter_table('datasets') as batch_op:
        batch_op.drop_constraint("datasets_pipeline_id_fkey", type_="foreignkey")
        batch_op.drop_index('dataset_name_index')
        batch_op.drop_table()
